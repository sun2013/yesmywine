---
swagger: "2.0"
info:
  description: "也买酒数据API"
  version: "1.0.0"
  title: "也买酒"
host: "127.0.0.1:3000"
basePath: "/v1"
schemes:
- "http"
produces:
- "application/json"
paths:
  /banner:
    get:
      tags:
      - "Banner"
      description: "轮播图"
      operationId: "bannerList"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Banner"
  /products/hotList:
    get:
      tags:
      - "hotList"
      description: "hotList"
      operationId: "hotList"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid status value"
      x-swagger-router-controller: "HotList"
  /products/list:
    get:
      tags:
      - "list"
      description: "list"
      operationId: "list"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid status value"
      x-swagger-router-controller: "List"
  /products/discount:
    get:
      tags:
      - "discount"
      description: "discount"
      operationId: "findPetsByTags"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid tag value"
      x-swagger-router-controller: "Discount"
  /produces/{goodId}:
    get:
      tags:
      - "good info"
      description: "goods info"
      operationId: "getGoodsInfo"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "goodId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      x-swagger-router-controller: "GoodInfo"
  /users:
    post:
      tags:
      - "user"
      summary: "创建用户"
      description: "注册"
      operationId: "createUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /users/login:
    post:
      tags:
      - "user"
      summary: "登陆"
      description: "登陆"
      operationId: "loginUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "The user name for login"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "User"
  /users/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /users/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "获取信息"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be deleted"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        items:
          type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
